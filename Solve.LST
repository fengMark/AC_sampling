C51 COMPILER V9.00   SOLVE                                                                 12/29/2017 22:30:18 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SOLVE
OBJECT MODULE PLACED IN Solve.OBJ
COMPILER INVOKED BY: H:\Program Files (x86)\C51\C51\BIN\C51.EXE Solve.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<Solve.h>
   2          /*----------------数组一条线路的电压和电流（A,B,C）的地址(VarrayA,CarrayA,VarrayB,CarrayB,VarrayC,CarrayC)
             ----------*/
   3          uint  code jacqu_addr[6]={0x0200,0x0300,0x0400,0x0500,0x0600,0x0700};
   4          int  xdata *  jacqu_volutage_arrayAA=0;         //0
   5          int  xdata *  jacqu_volutage_arrayBB=0;         //2
   6          int  xdata *  jacqu_volutage_arrayCC=0;         //4
   7          int  xdata *  jacqu_current_arrayAA=0;          //1
   8          int  xdata *  jacqu_current_arrayBB=0;          //3
   9          int  xdata *  jacqu_current_arrayCC=0;          //5
  10          static uint sqrt(unsigned long M){
  11   1              unsigned int N, i;
  12   1              unsigned long tmp, ttp; // 结果、循环计数
  13   1              if(M == 0) // 被开方数，开方结果也为0
  14   1                      return 0;
  15   1              N = 0;
  16   1              tmp = (M >> 30); // 获取最高位：B[m-1]
  17   1              M<<=2;
  18   1              if(tmp > 1) // 最高位为1
  19   1              {
  20   2                      N ++; // 结果当前位为1，否则为默认的0
  21   2                      tmp -= N;
  22   2              }
  23   1              for(i=15; i>0; i--) // 求剩余的15位
  24   1              {
  25   2                      N <<= 1; // 左移一位
  26   2                      tmp <<= 2;
  27   2                      tmp += (M >> 30); // 假设
  28   2                      ttp = N;
  29   2                      ttp = (ttp<<1)+1;
  30   2                      M <<= 2;
  31   2                      if(tmp >= ttp) // 假设成立
  32   2                      {
  33   3                              tmp -= ttp;
  34   3                              N++;
  35   3                      }
  36   2              }
  37   1              return N;
  38   1      }
  39          uint JiSuan_U_I(int  *array){
  40   1              uchar i;
  41   1              uint value;
  42   1              unsigned long sum=0;
  43   1              for(i=0;i<32;i++){
  44   2                      sum+=(*array)*(*array);
  45   2                      array++;
  46   2              }
  47   1              value=sqrt(sum/32);
  48   1              return value;
  49   1      }
  50          long JiSuan_P(){                 
  51   1              uchar i;
  52   1              long Pa,Pb,Pc,P;
  53   1              jacqu_volutage_arrayAA=(int xdata *)jacqu_addr[0];
  54   1              jacqu_current_arrayAA=(int xdata *)jacqu_addr[1];
C51 COMPILER V9.00   SOLVE                                                                 12/29/2017 22:30:18 PAGE 2   

  55   1              jacqu_volutage_arrayBB=(int xdata *)jacqu_addr[2];
  56   1              jacqu_current_arrayBB=(int xdata *)jacqu_addr[3];
  57   1              jacqu_volutage_arrayBB=(int xdata *)jacqu_addr[4];
  58   1              jacqu_current_arrayBB =(int xdata *)jacqu_addr[5];
  59   1              for(i=0;i<32;i++){
  60   2                      Pa+=(jacqu_current_arrayAA[i]*jacqu_volutage_arrayAA[i]);
  61   2              }
  62   1              Pa=Pa/32;
  63   1              for(i=0;i<32;i++){
  64   2                      Pb+=(jacqu_current_arrayBB[i]*jacqu_volutage_arrayBB[i]);
  65   2              }
  66   1              Pb=Pb/32;
  67   1              for(i=0;i<32;i++){
  68   2                      Pc+=(jacqu_current_arrayCC[i]*jacqu_volutage_arrayCC[i]);
  69   2              }
  70   1              Pc=Pc/32;
  71   1              P=Pa+Pb+Pc;
  72   1              return P;
  73   1      }
  74          long JiSuan_Q(){                 
  75   1              uchar i;
  76   1              int Q;
  77   1              signed long Qa,Qb,Qc;
  78   1              jacqu_volutage_arrayAA=(int xdata *)jacqu_addr[0];
  79   1              jacqu_current_arrayAA=(int xdata *)jacqu_addr[1];
  80   1              jacqu_volutage_arrayBB=(int xdata *)jacqu_addr[2];
  81   1              jacqu_current_arrayBB=(int xdata *)jacqu_addr[3];
  82   1              jacqu_volutage_arrayBB=(int xdata *)jacqu_addr[4];
  83   1              jacqu_current_arrayBB =(int xdata *)jacqu_addr[5];
  84   1              Qa=(jacqu_current_arrayAA[0]*jacqu_volutage_arrayAA[31]-jacqu_current_arrayAA[31]*jacqu_volutage_arrayAA[
             -0])/2;
  85   1              Qb=(jacqu_current_arrayBB[0]*jacqu_volutage_arrayBB[31]-jacqu_current_arrayBB[31]*jacqu_volutage_arrayBB[
             -0])/2;
  86   1              Qc=(jacqu_current_arrayCC[0]*jacqu_volutage_arrayCC[31]-jacqu_current_arrayCC[31]*jacqu_volutage_arrayCC[
             -0])/2;
  87   1              for(i=1;i<32;i++){
  88   2                      Qa+=((jacqu_current_arrayAA[i+1]*jacqu_volutage_arrayAA[i]-jacqu_current_arrayAA[i]*jacqu_volutage_array
             -AA[i+1])/2);
  89   2              }
  90   1              Qa/=32;
  91   1              for(i=1;i<32;i++){
  92   2                      Qb+=((jacqu_current_arrayBB[i+1]*jacqu_volutage_arrayBB[i]-jacqu_current_arrayBB[i]*jacqu_volutage_array
             -BB[i+1])/2);
  93   2              }
  94   1              Qb/=32;
  95   1              for(i=1;i<32;i++){
  96   2                      Qc+=((jacqu_current_arrayCC[i+1]*jacqu_volutage_arrayCC[i]-jacqu_current_arrayCC[i]*jacqu_volutage_array
             -CC[i+1])/2);
  97   2              }
  98   1              Qc/=32;
  99   1              Q=Qa+Qb+Qc;
 100   1              return Q;
 101   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1754    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      44
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.00   SOLVE                                                                 12/29/2017 22:30:18 PAGE 3   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
